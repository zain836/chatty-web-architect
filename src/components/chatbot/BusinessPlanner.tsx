import { useState } from "react";
import { Briefcase, TrendingUp, Target, DollarSign, Users, Download, Shield } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const BusinessPlanner = () => {
  const [businessIdea, setBusinessIdea] = useState("");
  const [industry, setIndustry] = useState("");
  const [targetMarket, setTargetMarket] = useState("");
  const [budget, setBudget] = useState("");
  const [generatedPlan, setGeneratedPlan] = useState(null);

  const industries = [
    { value: "saas", label: "SaaS/Software" },
    { value: "ecommerce", label: "E-commerce" },
    { value: "fintech", label: "FinTech" },
    { value: "healthtech", label: "HealthTech" },
    { value: "edtech", label: "EdTech" },
    { value: "consulting", label: "Consulting" },
    { value: "retail", label: "Retail" },
    { value: "foodservice", label: "Food Service" }
  ];

  const generateBusinessPlan = () => {
    if (!businessIdea || !industry || !targetMarket) return;

    const plan = {
      executiveSummary: `${businessIdea} is an innovative ${industry} solution targeting ${targetMarket}. Our mission is to revolutionize the market through cutting-edge technology and superior customer experience.`,
      
      marketAnalysis: {
        marketSize: industry === "saas" ? "$500B" : industry === "ecommerce" ? "$4.2T" : "$100B+",
        growth: "15-25% annually",
        competitors: ["Competitor A", "Competitor B", "Competitor C"],
        opportunity: "Significant market gap in providing personalized solutions for underserved segments"
      },
      
      businessModel: {
        revenue: industry === "saas" ? "Subscription-based (SaaS)" : "Transaction-based",
        pricing: budget ? `Starting at $${Math.floor(parseInt(budget) * 0.1)}/month` : "Competitive pricing",
        channels: ["Digital Marketing", "Partner Networks", "Direct Sales"]
      },
      
      financialProjections: {
        year1: { revenue: budget ? parseInt(budget) * 2 : 100000, expenses: budget ? parseInt(budget) * 1.5 : 75000 },
        year2: { revenue: budget ? parseInt(budget) * 5 : 250000, expenses: budget ? parseInt(budget) * 3 : 180000 },
        year3: { revenue: budget ? parseInt(budget) * 10 : 500000, expenses: budget ? parseInt(budget) * 6 : 350000 }
      },
      
      marketingStrategy: [
        "Content marketing and SEO optimization",
        "Social media advertising on LinkedIn and Twitter",
        "Industry partnerships and collaborations",
        "Influencer and thought leader engagement",
        "Email marketing campaigns"
      ],
      
      operationalPlan: [
        "Phase 1: MVP development and testing (3 months)",
        "Phase 2: Initial customer acquisition (6 months)",
        "Phase 3: Product iteration and scaling (12 months)",
        "Phase 4: Market expansion and team growth (18 months)"
      ],
      
      riskAnalysis: [
        "Market competition and saturation",
        "Technology disruption and obsolescence",
        "Regulatory changes and compliance",
        "Economic downturns affecting customer spending",
        "Talent acquisition and retention challenges"
      ]
    };

    setGeneratedPlan(plan);
  };

  const downloadPlan = () => {
    if (!generatedPlan) return;

    const planContent = `
# Business Plan: ${businessIdea}
Generated by ShadowTalk AI - Business Intelligence

## Executive Summary
${generatedPlan.executiveSummary}

## Market Analysis
- Market Size: ${generatedPlan.marketAnalysis.marketSize}
- Growth Rate: ${generatedPlan.marketAnalysis.growth}
- Key Opportunity: ${generatedPlan.marketAnalysis.opportunity}

## Business Model
- Revenue Model: ${generatedPlan.businessModel.revenue}
- Pricing Strategy: ${generatedPlan.businessModel.pricing}
- Sales Channels: ${generatedPlan.businessModel.channels.join(", ")}

## Financial Projections
Year 1: Revenue $${generatedPlan.financialProjections.year1.revenue.toLocaleString()}, Expenses $${generatedPlan.financialProjections.year1.expenses.toLocaleString()}
Year 2: Revenue $${generatedPlan.financialProjections.year2.revenue.toLocaleString()}, Expenses $${generatedPlan.financialProjections.year2.expenses.toLocaleString()}
Year 3: Revenue $${generatedPlan.financialProjections.year3.revenue.toLocaleString()}, Expenses $${generatedPlan.financialProjections.year3.expenses.toLocaleString()}

## Marketing Strategy
${generatedPlan.marketingStrategy.map(item => `- ${item}`).join('\n')}

## Operational Plan
${generatedPlan.operationalPlan.map(item => `- ${item}`).join('\n')}

## Risk Analysis
${generatedPlan.riskAnalysis.map(item => `- ${item}`).join('\n')}

---
Generated by ShadowTalk AI Business Intelligence
Contact: support@shadowtalk.ai
    `.trim();

    const element = document.createElement("a");
    const file = new Blob([planContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `business-plan-${businessIdea.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <Card className="bg-card/50 backdrop-blur-sm border-border shadow-glow">
      <CardHeader>
        <div className="flex items-center space-x-2">
          <Briefcase className="h-5 w-5 text-green-400" />
          <h3 className="text-lg font-semibold">AI Business Planner</h3>
          <Badge className="text-xs bg-gradient-primary">Elite+</Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">Business Idea</label>
            <Input
              value={businessIdea}
              onChange={(e) => setBusinessIdea(e.target.value)}
              placeholder="AI-powered productivity app..."
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Industry</label>
            <Select value={industry} onValueChange={setIndustry}>
              <SelectTrigger>
                <SelectValue placeholder="Select industry" />
              </SelectTrigger>
              <SelectContent>
                {industries.map((ind) => (
                  <SelectItem key={ind.value} value={ind.value}>
                    {ind.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">Target Market</label>
            <Input
              value={targetMarket}
              onChange={(e) => setTargetMarket(e.target.value)}
              placeholder="Small businesses, freelancers..."
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Initial Budget ($)</label>
            <Input
              value={budget}
              onChange={(e) => setBudget(e.target.value)}
              placeholder="50000"
              type="number"
            />
          </div>
        </div>

        <Button 
          onClick={generateBusinessPlan} 
          className="w-full btn-glow"
          disabled={!businessIdea || !industry || !targetMarket}
        >
          <TrendingUp className="h-4 w-4 mr-2" />
          Generate Business Plan
        </Button>

        {generatedPlan && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="text-lg font-semibold">Generated Business Plan</h4>
              <Button size="sm" variant="outline" onClick={downloadPlan}>
                <Download className="h-3 w-3 mr-1" />
                Download
              </Button>
            </div>

            <Tabs defaultValue="summary" className="w-full">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="summary">Summary</TabsTrigger>
                <TabsTrigger value="financial">Financial</TabsTrigger>
                <TabsTrigger value="marketing">Marketing</TabsTrigger>
                <TabsTrigger value="risks">Risks</TabsTrigger>
              </TabsList>

              <TabsContent value="summary" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Target className="h-4 w-4 text-primary" />
                      <h5 className="font-semibold">Executive Summary</h5>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground">{generatedPlan.executiveSummary}</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Users className="h-4 w-4 text-primary" />
                      <h5 className="font-semibold">Market Analysis</h5>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Market Size:</span>
                      <span className="text-sm font-medium">{generatedPlan.marketAnalysis.marketSize}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Growth Rate:</span>
                      <span className="text-sm font-medium">{generatedPlan.marketAnalysis.growth}</span>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="financial" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <DollarSign className="h-4 w-4 text-green-400" />
                      <h5 className="font-semibold">3-Year Financial Projection</h5>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {[1, 2, 3].map((year) => (
                      <div key={year} className="p-3 bg-muted/50 rounded-lg">
                        <h6 className="font-medium mb-2">Year {year}</h6>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Revenue:</span>
                            <span className="ml-2 font-medium text-green-400">
                              ${generatedPlan.financialProjections[`year${year}`].revenue.toLocaleString()}
                            </span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Expenses:</span>
                            <span className="ml-2 font-medium text-red-400">
                              ${generatedPlan.financialProjections[`year${year}`].expenses.toLocaleString()}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="marketing" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <TrendingUp className="h-4 w-4 text-blue-400" />
                      <h5 className="font-semibold">Marketing Strategy</h5>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {generatedPlan.marketingStrategy.map((strategy, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <span className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></span>
                          <span className="text-sm">{strategy}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="risks" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Shield className="h-4 w-4 text-orange-400" />
                      <h5 className="font-semibold">Risk Analysis</h5>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {generatedPlan.riskAnalysis.map((risk, index) => (
                        <li key={index} className="flex items-start space-x-2">
                          <span className="w-2 h-2 bg-orange-400 rounded-full mt-2 flex-shrink-0"></span>
                          <span className="text-sm">{risk}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default BusinessPlanner;