import { useState } from "react";
import { Code, Copy, Download, Play, FileText } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";

const ScriptWriter = () => {
  const [language, setLanguage] = useState("");
  const [scriptType, setScriptType] = useState("");
  const [description, setDescription] = useState("");
  const [generatedScript, setGeneratedScript] = useState("");

  const languages = [
    { value: "python", label: "Python", icon: "🐍" },
    { value: "javascript", label: "JavaScript", icon: "⚡" },
    { value: "bash", label: "Bash", icon: "🐧" },
    { value: "powershell", label: "PowerShell", icon: "💻" },
    { value: "php", label: "PHP", icon: "🌐" },
    { value: "ruby", label: "Ruby", icon: "💎" }
  ];

  const scriptTypes = [
    { value: "automation", label: "Automation Script" },
    { value: "web_scraper", label: "Web Scraper" },
    { value: "file_organizer", label: "File Organizer" },
    { value: "api_client", label: "API Client" },
    { value: "data_processor", label: "Data Processor" },
    { value: "system_monitor", label: "System Monitor" }
  ];

  const generateScript = () => {
    if (!language || !scriptType || !description) return;

    const templates = {
      python: {
        automation: `#!/usr/bin/env python3
"""
${description}
Generated by ShadowTalk AI - Script Writer
"""

import os
import sys
import time
from datetime import datetime

class AutomationScript:
    def __init__(self):
        self.start_time = datetime.now()
        print(f"🤖 ShadowTalk Automation Started: {self.start_time}")
    
    def execute_task(self):
        """Main automation logic"""
        try:
            print("⚡ Executing automation task...")
            # Your automation logic here
            
            # Example: File processing
            for file in os.listdir('.'):
                if file.endswith('.txt'):
                    print(f"📄 Processing: {file}")
                    # Add your processing logic
            
            print("✅ Automation completed successfully!")
            
        except Exception as e:
            print(f"❌ Error: {e}")
            return False
        
        return True
    
    def cleanup(self):
        """Cleanup operations"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        print(f"⏱️ Total execution time: {duration}")

if __name__ == "__main__":
    script = AutomationScript()
    success = script.execute_task()
    script.cleanup()
    sys.exit(0 if success else 1)`,
        
        web_scraper: `#!/usr/bin/env python3
"""
${description}
ShadowTalk AI Web Scraper
"""

import requests
from bs4 import BeautifulSoup
import json
import time
import csv

class ShadowScraper:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'ShadowTalk-AI-Scraper/1.0'
        })
        self.data = []
    
    def scrape_page(self, url):
        """Scrape a single page"""
        try:
            print(f"🔍 Scraping: {url}")
            response = self.session.get(url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Example scraping logic
            data = {
                'title': soup.find('title').text if soup.find('title') else 'No title',
                'url': url,
                'timestamp': time.time()
            }
            
            self.data.append(data)
            print(f"✅ Scraped: {data['title']}")
            
        except Exception as e:
            print(f"❌ Error scraping {url}: {e}")
    
    def save_data(self, format='json'):
        """Save scraped data"""
        filename = f"shadowtalk_scrape_{int(time.time())}"
        
        if format == 'json':
            with open(f"{filename}.json", 'w') as f:
                json.dump(self.data, f, indent=2)
        elif format == 'csv':
            with open(f"{filename}.csv", 'w', newline='') as f:
                if self.data:
                    writer = csv.DictWriter(f, fieldnames=self.data[0].keys())
                    writer.writeheader()
                    writer.writerows(self.data)
        
        print(f"💾 Data saved to {filename}.{format}")

# Usage
if __name__ == "__main__":
    scraper = ShadowScraper("https://example.com")
    scraper.scrape_page("https://example.com/page1")
    scraper.save_data('json')`
      },
      
      javascript: {
        automation: `/**
 * ${description}
 * Generated by ShadowTalk AI - Script Writer
 */

class ShadowTalkAutomation {
    constructor() {
        this.startTime = new Date();
        console.log('🤖 ShadowTalk Automation Started:', this.startTime);
    }
    
    async executeTask() {
        try {
            console.log('⚡ Executing automation task...');
            
            // Example: DOM manipulation
            const elements = document.querySelectorAll('.target-element');
            elements.forEach((element, index) => {
                console.log(\`📄 Processing element \${index + 1}\`);
                // Add your processing logic here
            });
            
            console.log('✅ Automation completed successfully!');
            return true;
            
        } catch (error) {
            console.error('❌ Error:', error);
            return false;
        }
    }
    
    cleanup() {
        const endTime = new Date();
        const duration = endTime - this.startTime;
        console.log(\`⏱️ Total execution time: \${duration}ms\`);
    }
}

// Usage
const automation = new ShadowTalkAutomation();
automation.executeTask().then(success => {
    automation.cleanup();
    console.log(success ? 'Script completed' : 'Script failed');
});`,

        api_client: `/**
 * ${description}
 * ShadowTalk AI API Client
 */

class ShadowAPIClient {
    constructor(baseURL, apiKey = null) {
        this.baseURL = baseURL;
        this.apiKey = apiKey;
        this.headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'ShadowTalk-AI-Client/1.0'
        };
        
        if (apiKey) {
            this.headers['Authorization'] = \`Bearer \${apiKey}\`;
        }
    }
    
    async request(method, endpoint, data = null) {
        const url = \`\${this.baseURL}\${endpoint}\`;
        
        const options = {
            method: method.toUpperCase(),
            headers: this.headers
        };
        
        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
            options.body = JSON.stringify(data);
        }
        
        try {
            console.log(\`🔗 API Request: \${method.toUpperCase()} \${url}\`);
            const response = await fetch(url, options);
            
            if (!response.ok) {
                throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
            }
            
            const result = await response.json();
            console.log('✅ API Response received');
            return result;
            
        } catch (error) {
            console.error('❌ API Error:', error);
            throw error;
        }
    }
    
    async get(endpoint) {
        return this.request('GET', endpoint);
    }
    
    async post(endpoint, data) {
        return this.request('POST', endpoint, data);
    }
    
    async put(endpoint, data) {
        return this.request('PUT', endpoint, data);
    }
    
    async delete(endpoint) {
        return this.request('DELETE', endpoint);
    }
}

// Usage Example
const client = new ShadowAPIClient('https://api.example.com', 'your-api-key');

client.get('/users')
    .then(users => console.log('Users:', users))
    .catch(error => console.error('Failed to fetch users:', error));`
      }
    };

    const script = templates[language]?.[scriptType] || `# ${description}\n# Script template for ${language} - ${scriptType}\n# Generated by ShadowTalk AI\n\nprint("Script generated successfully!")`;
    setGeneratedScript(script);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedScript);
  };

  const downloadScript = () => {
    const extensions = {
      python: 'py',
      javascript: 'js',
      bash: 'sh',
      powershell: 'ps1',
      php: 'php',
      ruby: 'rb'
    };

    const element = document.createElement("a");
    const file = new Blob([generatedScript], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `shadowtalk_script.${extensions[language] || 'txt'}`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <Card className="bg-card/50 backdrop-blur-sm border-border shadow-glow">
      <CardHeader>
        <div className="flex items-center space-x-2">
          <Code className="h-5 w-5 text-blue-400" />
          <h3 className="text-lg font-semibold">Script Writer</h3>
          <Badge variant="secondary" className="text-xs">Premium+</Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">Programming Language</label>
            <Select value={language} onValueChange={setLanguage}>
              <SelectTrigger>
                <SelectValue placeholder="Select language" />
              </SelectTrigger>
              <SelectContent>
                {languages.map((lang) => (
                  <SelectItem key={lang.value} value={lang.value}>
                    <div className="flex items-center space-x-2">
                      <span>{lang.icon}</span>
                      <span>{lang.label}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Script Type</label>
            <Select value={scriptType} onValueChange={setScriptType}>
              <SelectTrigger>
                <SelectValue placeholder="Select script type" />
              </SelectTrigger>
              <SelectContent>
                {scriptTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <label className="text-sm font-medium">Description</label>
          <Input
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe what your script should do..."
          />
        </div>

        <Button 
          onClick={generateScript} 
          className="w-full btn-glow"
          disabled={!language || !scriptType || !description}
        >
          <FileText className="h-4 w-4 mr-2" />
          Generate Script
        </Button>

        {generatedScript && (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Generated Script</label>
              <div className="flex space-x-2">
                <Button size="sm" variant="outline" onClick={copyToClipboard}>
                  <Copy className="h-3 w-3 mr-1" />
                  Copy
                </Button>
                <Button size="sm" variant="outline" onClick={downloadScript}>
                  <Download className="h-3 w-3 mr-1" />
                  Download
                </Button>
              </div>
            </div>
            <Textarea
              value={generatedScript}
              readOnly
              className="font-mono text-xs bg-muted/50 min-h-[400px]"
            />
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ScriptWriter;